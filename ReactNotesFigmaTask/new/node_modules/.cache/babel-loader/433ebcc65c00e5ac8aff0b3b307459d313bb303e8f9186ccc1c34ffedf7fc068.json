{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\ReactNotesFigmaTask\\\\new\\\\src\\\\FigmaNotes\\\\GroupDetails.jsx\",\n  _s = $RefreshSig$();\n/*import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      <div className=\"header\">\r\n        <h2>{groupName}</h2>\r\n      </div>\r\n      <div className=\"messages\">\r\n        <p>\r\n          Another productive way to use this tool is to begin a daily writing\r\n          routine. One way is to generate a random paragraph with the intention\r\n          to rewrite it while still keeping the original meaning. The purpose\r\n          here is to just get the writing started so that when the writer goes\r\n          onto their day's writing projects, words are already flowing from\r\n          their fingers.\r\n        </p>\r\n        <p className=\"timestamp\">9 Mar 2023 • 10:10 AM</p>\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <input type=\"text\" placeholder=\"Here's the sample text for sample work\" />\r\n        <button>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\n\n/*import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n  // Example groups\r\n  const groups = [\r\n    { name: \"My Notes\", color: \"#007bff\" },\r\n    { name: \"My personal grp\", color: \"#9b59b6\" },\r\n    { name: \"Javascript grp\", color: \"#f39c12\" },\r\n    { name: \"HTML grp\", color: \"#1abc9c\" },\r\n    { name: \"CSS Notes\", color: \"#d35400\" },\r\n    { name: \"SQL Notes\", color: \"#3498db\" },\r\n    { name: \"Python Notes\", color: \"#8e44ad\" },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      \r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          {groups.map((group, index) => (\r\n            <li\r\n              key={index}\r\n              className=\"group-item\"\r\n              style={{ backgroundColor: group.color }}\r\n            >\r\n              {group.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      \r\n      <div className=\"main-content\">\r\n       \r\n        <div className=\"header\">\r\n          <h2>{groupName}</h2>\r\n        </div>\r\n\r\n       \r\n        <div className=\"messages\">\r\n          <p>\r\n            Another productive way to use this tool is to begin a daily writing\r\n            routine. One way is to generate a random paragraph with the\r\n            intention to rewrite it while still keeping the original meaning.\r\n            The purpose here is to just get the writing started so that when\r\n            the writer goes onto their day's writing projects, words are already\r\n            flowing from their fingers.\r\n          </p>\r\n          <p className=\"timestamp\">9 Mar 2023 • 10:10 AM</p>\r\n        </div>\r\n\r\n        \r\n        <div className=\"input-box\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Here's the sample text for sample work\"\r\n          />\r\n          <button>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupDetails = () => {\n  _s();\n  const {\n    groupName\n  } = useParams();\n\n  // Example groups\n  const groups = [{\n    name: \"My Notes\",\n    color: \"#007bff\"\n  }, {\n    name: \"My personal grp\",\n    color: \"#9b59b6\"\n  }, {\n    name: \"Javascript grp\",\n    color: \"#f39c12\"\n  }, {\n    name: \"HTML grp\",\n    color: \"#1abc9c\"\n  }, {\n    name: \"CSS Notes\",\n    color: \"#d35400\"\n  }, {\n    name: \"SQL Notes\",\n    color: \"#3498db\"\n  }, {\n    name: \"Python Notes\",\n    color: \"#8e44ad\"\n  }];\n  const [newMessage, setNewMessage] = useState(\"\"); // State for new input message\n\n  // Handle Send button click to append the new message to the paragraph\n  const handleSend = () => {\n    const messageParagraph = document.getElementById(\"message-paragraph\");\n    if (newMessage.trim() !== \"\") {\n      messageParagraph.textContent += \" \" + newMessage; // Append the new message\n      setNewMessage(\"\"); // Clear the input field after sending\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: groups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"group-item\",\n          style: {\n            backgroundColor: group.color\n          },\n          children: group.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: groupName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"message-paragraph\",\n          children: \"Another productive way to use this tool is to begin a daily writing routine. One way is to generate a random paragraph with the intention to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"timestamp\",\n          children: \"9 Mar 2023 \\u2022 10:10 AM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your message\",\n          value: newMessage // Bind input value to state\n          ,\n          onChange: e => setNewMessage(e.target.value) // Update the input value in state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(GroupDetails, \"H1kG+UmX7lX9MaLDqfss4D0Pjao=\", false, function () {\n  return [useParams];\n});\n_c = GroupDetails;\nexport default GroupDetails;\nvar _c;\n$RefreshReg$(_c, \"GroupDetails\");","map":{"version":3,"names":["React","useState","useParams","jsxDEV","_jsxDEV","GroupDetails","_s","groupName","groups","name","color","newMessage","setNewMessage","handleSend","messageParagraph","document","getElementById","trim","textContent","className","children","map","group","index","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/ReactNotesFigmaTask/new/src/FigmaNotes/GroupDetails.jsx"],"sourcesContent":["/*import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      <div className=\"header\">\r\n        <h2>{groupName}</h2>\r\n      </div>\r\n      <div className=\"messages\">\r\n        <p>\r\n          Another productive way to use this tool is to begin a daily writing\r\n          routine. One way is to generate a random paragraph with the intention\r\n          to rewrite it while still keeping the original meaning. The purpose\r\n          here is to just get the writing started so that when the writer goes\r\n          onto their day's writing projects, words are already flowing from\r\n          their fingers.\r\n        </p>\r\n        <p className=\"timestamp\">9 Mar 2023 • 10:10 AM</p>\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <input type=\"text\" placeholder=\"Here's the sample text for sample work\" />\r\n        <button>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\r\n\r\n\r\n/*import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n  // Example groups\r\n  const groups = [\r\n    { name: \"My Notes\", color: \"#007bff\" },\r\n    { name: \"My personal grp\", color: \"#9b59b6\" },\r\n    { name: \"Javascript grp\", color: \"#f39c12\" },\r\n    { name: \"HTML grp\", color: \"#1abc9c\" },\r\n    { name: \"CSS Notes\", color: \"#d35400\" },\r\n    { name: \"SQL Notes\", color: \"#3498db\" },\r\n    { name: \"Python Notes\", color: \"#8e44ad\" },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      \r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          {groups.map((group, index) => (\r\n            <li\r\n              key={index}\r\n              className=\"group-item\"\r\n              style={{ backgroundColor: group.color }}\r\n            >\r\n              {group.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      \r\n      <div className=\"main-content\">\r\n       \r\n        <div className=\"header\">\r\n          <h2>{groupName}</h2>\r\n        </div>\r\n\r\n       \r\n        <div className=\"messages\">\r\n          <p>\r\n            Another productive way to use this tool is to begin a daily writing\r\n            routine. One way is to generate a random paragraph with the\r\n            intention to rewrite it while still keeping the original meaning.\r\n            The purpose here is to just get the writing started so that when\r\n            the writer goes onto their day's writing projects, words are already\r\n            flowing from their fingers.\r\n          </p>\r\n          <p className=\"timestamp\">9 Mar 2023 • 10:10 AM</p>\r\n        </div>\r\n\r\n        \r\n        <div className=\"input-box\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Here's the sample text for sample work\"\r\n          />\r\n          <button>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n  // Example groups\r\n  const groups = [\r\n    { name: \"My Notes\", color: \"#007bff\" },\r\n    { name: \"My personal grp\", color: \"#9b59b6\" },\r\n    { name: \"Javascript grp\", color: \"#f39c12\" },\r\n    { name: \"HTML grp\", color: \"#1abc9c\" },\r\n    { name: \"CSS Notes\", color: \"#d35400\" },\r\n    { name: \"SQL Notes\", color: \"#3498db\" },\r\n    { name: \"Python Notes\", color: \"#8e44ad\" },\r\n  ];\r\n\r\n  const [newMessage, setNewMessage] = useState(\"\"); // State for new input message\r\n\r\n  // Handle Send button click to append the new message to the paragraph\r\n  const handleSend = () => {\r\n    const messageParagraph = document.getElementById(\"message-paragraph\");\r\n    if (newMessage.trim() !== \"\") {\r\n      messageParagraph.textContent += \" \" + newMessage; // Append the new message\r\n      setNewMessage(\"\"); // Clear the input field after sending\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      {/* Sidebar with group items */}\r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          {groups.map((group, index) => (\r\n            <li\r\n              key={index}\r\n              className=\"group-item\"\r\n              style={{ backgroundColor: group.color }}\r\n            >\r\n              {group.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Main content */}\r\n      <div className=\"main-content\">\r\n        {/* Group header */}\r\n        <div className=\"header\">\r\n          <h2>{groupName}</h2>\r\n        </div>\r\n\r\n        {/* Paragraph content */}\r\n        <div className=\"messages\">\r\n          <p id=\"message-paragraph\">\r\n            Another productive way to use this tool is to begin a daily writing\r\n            routine. One way is to generate a random paragraph with the intention\r\n            to rewrite it while still keeping the original meaning. The purpose\r\n            here is to just get the writing started so that when the writer goes\r\n            onto their day's writing projects, words are already flowing from\r\n            their fingers.\r\n          </p>\r\n          <p className=\"timestamp\">9 Mar 2023 • 10:10 AM</p>\r\n        </div>\r\n\r\n        {/* Input box */}\r\n        <div className=\"input-box\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your message\"\r\n            value={newMessage} // Bind input value to state\r\n            onChange={(e) => setNewMessage(e.target.value)} // Update the input value in state\r\n          />\r\n          <button onClick={handleSend}>Send</button> {/* Send the new message */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;\r\n\r\n\r\n"],"mappingsvC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAU,CAAC,GAAGL,SAAS,CAAC,CAAC;;EAEjC;EACA,MAAMM,MAAM,GAAG,CACb;IAAEC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,iBAAiB;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC7C;IAAED,IAAI,EAAE,gBAAgB;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC5C;IAAED,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAU,CAAC,EACvC;IAAED,IAAI,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAU,CAAC,EACvC;IAAED,IAAI,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAU,CAAC,CAC3C;EAED,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC;IACrE,IAAIL,UAAU,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5BH,gBAAgB,CAACI,WAAW,IAAI,GAAG,GAAGP,UAAU,CAAC,CAAC;MAClDC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,oBACER,OAAA;IAAKe,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5BhB,OAAA;MAAKe,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBhB,OAAA;QAAAgB,QAAA,EACGZ,MAAM,CAACa,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBnB,OAAA;UAEEe,SAAS,EAAC,YAAY;UACtBK,KAAK,EAAE;YAAEC,eAAe,EAAEH,KAAK,CAACZ;UAAM,CAAE;UAAAU,QAAA,EAEvCE,KAAK,CAACb;QAAI,GAJNc,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAGNzB,OAAA;MAAKe,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAE3BhB,OAAA;QAAKe,SAAS,EAAC,QAAQ;QAAAC,QAAA,eACrBhB,OAAA;UAAAgB,QAAA,EAAKb;QAAS;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC,eAGNzB,OAAA;QAAKe,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBhB,OAAA;UAAG0B,EAAE,EAAC,mBAAmB;UAAAV,QAAA,EAAC;QAO1B;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJzB,OAAA;UAAGe,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAC;QAAqB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eAGNzB,OAAA;QAAKe,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBhB,OAAA;UACE2B,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,oBAAoB;UAChCC,KAAK,EAAEtB,UAAW,CAAC;UAAA;UACnBuB,QAAQ,EAAGC,CAAC,IAAKvB,aAAa,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,eACFzB,OAAA;UAAQiC,OAAO,EAAExB,UAAW;UAAAO,QAAA,EAAC;QAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvB,EAAA,CA3EID,YAAY;EAAA,QACMH,SAAS;AAAA;AAAAoC,EAAA,GAD3BjC,YAAY;AA6ElB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}