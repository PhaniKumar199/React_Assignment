{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\ReactNotesFigmaTask\\\\new\\\\src\\\\FigmaNotes\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  // State to hold group names\n  const [groups, setGroups] = useState([]);\n\n  // State to manage whether the pop-up is visible or not\n  const [showPopup, setShowPopup] = useState(false);\n\n  // State to store the input value for the group name\n  const [groupName, setGroupName] = useState(\"\");\n\n  // Function to display the pop-up when the \"+\" button is clicked\n  const handleAddGroup = () => {\n    setShowPopup(true); // Show pop-up\n  };\n\n  // Function to handle creating the new group\n  const handleCreateGroup = () => {\n    if (groupName.trim()) {\n      // Check if the input is not empty\n      setGroups([...groups, groupName]); // Add new group name to the list\n      setGroupName(\"\"); // Reset the input field\n      setShowPopup(false); // Close the pop-up\n    } else {\n      alert(\"Please enter a group name.\"); // Alert if input is empty\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: groups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: group\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) // Display each group name\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddGroup,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: groupName,\n        onChange: e => setGroupName(e.target.value) // Update input value\n        ,\n        placeholder: \"Enter group name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateGroup,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowPopup(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"WBkAgoDhjbw4I2v97CADqpADEmQ=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Home","_s","groups","setGroups","showPopup","setShowPopup","groupName","setGroupName","handleAddGroup","handleCreateGroup","trim","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","map","group","index","onClick","className","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/ReactNotesFigmaTask/new/src/FigmaNotes/Home.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Home = () => {\r\n  // State to hold group names\r\n  const [groups, setGroups] = useState([]);\r\n  \r\n  // State to manage whether the pop-up is visible or not\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  // State to store the input value for the group name\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  // Function to display the pop-up when the \"+\" button is clicked\r\n  const handleAddGroup = () => {\r\n    setShowPopup(true); // Show pop-up\r\n  };\r\n\r\n  // Function to handle creating the new group\r\n  const handleCreateGroup = () => {\r\n    if (groupName.trim()) { // Check if the input is not empty\r\n      setGroups([...groups, groupName]); // Add new group name to the list\r\n      setGroupName(\"\"); // Reset the input field\r\n      setShowPopup(false); // Close the pop-up\r\n    } else {\r\n      alert(\"Please enter a group name.\"); // Alert if input is empty\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>My Notes</h1>\r\n\r\n      {/* Display the list of groups */}\r\n      <ul>\r\n        {groups.map((group, index) => (\r\n          <li key={index}>{group}</li> // Display each group name\r\n        ))}\r\n      </ul>\r\n\r\n      {/* \"+\" Button to add a new group */}\r\n      <button onClick={handleAddGroup}>+</button>\r\n\r\n      {/* Pop-up form to create a new group */}\r\n      {showPopup && (\r\n        <div className=\"popup\">\r\n          <input\r\n            type=\"text\"\r\n            value={groupName}\r\n            onChange={(e) => setGroupName(e.target.value)} // Update input value\r\n            placeholder=\"Enter group name\"\r\n          />\r\n          <button onClick={handleCreateGroup}>Create</button>\r\n          <button onClick={() => setShowPopup(false)}>Cancel</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3BH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIH,SAAS,CAACI,IAAI,CAAC,CAAC,EAAE;MAAE;MACtBP,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEI,SAAS,CAAC,CAAC,CAAC,CAAC;MACnCC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;MAClBF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MACLM,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;IACvC;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGjBjB,OAAA;MAAAa,QAAA,EACGV,MAAM,CAACe,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBpB,OAAA;QAAAa,QAAA,EAAiBM;MAAK,GAAbC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,CAAC;MAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAGLjB,OAAA;MAAQqB,OAAO,EAAEZ,cAAe;MAAAI,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAG1CZ,SAAS,iBACRL,OAAA;MAAKsB,SAAS,EAAC,OAAO;MAAAT,QAAA,gBACpBb,OAAA;QACEuB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEjB,SAAU;QACjBkB,QAAQ,EAAGC,CAAC,IAAKlB,YAAY,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;QAAA;QAC/CI,WAAW,EAAC;MAAkB;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFjB,OAAA;QAAQqB,OAAO,EAAEX,iBAAkB;QAAAG,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnDjB,OAAA;QAAQqB,OAAO,EAAEA,CAAA,KAAMf,YAAY,CAAC,KAAK,CAAE;QAAAO,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CAvDID,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAyDV,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}