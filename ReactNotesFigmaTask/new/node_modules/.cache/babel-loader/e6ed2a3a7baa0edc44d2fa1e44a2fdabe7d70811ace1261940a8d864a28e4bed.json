{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\ReactNotesFigmaTask\\\\new\\\\src\\\\FigmaNotes\\\\GroupDetails.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n \r\n  const groups = [\r\n    { name: \"My Notes\", color: \"#007bff\" },\r\n    { name: \"My personal grp\", color: \"#9b59b6\" },\r\n    { name: \"Javascript grp\", color: \"#f39c12\" },\r\n    { name: \"HTML grp\", color: \"#1abc9c\" },\r\n    { name: \"CSS Notes\", color: \"#d35400\" },\r\n    { name: \"SQL Notes\", color: \"#3498db\" },\r\n    { name: \"Python Notes\", color: \"#8e44ad\" },\r\n  ];\r\n\r\n  const [newMessage, setNewMessage] = useState(\"\"); \r\n  const [messages, setMessages] = useState([ \r\n    \"Another productive way to use this tool is to begin a daily writing routine. One way is to generate a random paragraph with the intention to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\"\r\n    ,\"Another productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\"\r\n\r\n  ]);\r\n\r\n  \r\n  const handleSend = () => {\r\n    if (newMessage.trim() !== \"\") {\r\n      setMessages([...messages, newMessage]); \r\n      setNewMessage(\"\"); \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n     \r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          {groups.map((group, index) => (\r\n            <li\r\n              key={index}\r\n              className=\"group-item\"\r\n              style={{ backgroundColor: group.color }}\r\n            >\r\n              {group.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n     \r\n      <div className=\"main-contents\">\r\n       \r\n        <div className=\"header\">\r\n          <h2>{groupName}</h2>\r\n        </div>\r\n\r\n        \r\n        <div className=\"messages\">\r\n          {messages.map((message, index) => (\r\n            <p key={index}>{message}<br></br><span>9 Mar 2023\r\n          10:10 AM</span></p>\r\n            \r\n          ))}\r\n          \r\n        </div>\r\n\r\n        \r\n        <div className=\"input-box\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your message\"\r\n            value={newMessage} \r\n            onChange={(e) => setNewMessage(e.target.value)} \r\n          />\r\n          <button onClick={handleSend}>Send</button> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupDetails = ({\n  groups\n}) => {\n  _s();\n  const {\n    groupName\n  } = useParams();\n  const group = groups.find(g => g.name === groupName);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const handleSend = () => {\n    if (newMessage.trim() !== \"\") {\n      setMessages([...messages, newMessage]);\n      setNewMessage(\"\");\n    }\n  };\n  if (!group) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Group Not Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [message, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"9 Mar 2023 10:10 AM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your message\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(GroupDetails, \"zqDqvR1Sf/AHCLdCVc0hdRa7WLU=\", false, function () {\n  return [useParams];\n});\n_c = GroupDetails;\nexport default GroupDetails;\nvar _c;\n$RefreshReg$(_c, \"GroupDetails\");","map":{"version":3,"names":["React","useState","useParams","jsxDEV","_jsxDEV","GroupDetails","groups","_s","groupName","group","find","g","name","newMessage","setNewMessage","messages","setMessages","handleSend","trim","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","message","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/ReactNotesFigmaTask/new/src/FigmaNotes/GroupDetails.jsx"],"sourcesContent":["/*import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = () => {\r\n  const { groupName } = useParams();\r\n\r\n \r\n  const groups = [\r\n    { name: \"My Notes\", color: \"#007bff\" },\r\n    { name: \"My personal grp\", color: \"#9b59b6\" },\r\n    { name: \"Javascript grp\", color: \"#f39c12\" },\r\n    { name: \"HTML grp\", color: \"#1abc9c\" },\r\n    { name: \"CSS Notes\", color: \"#d35400\" },\r\n    { name: \"SQL Notes\", color: \"#3498db\" },\r\n    { name: \"Python Notes\", color: \"#8e44ad\" },\r\n  ];\r\n\r\n  const [newMessage, setNewMessage] = useState(\"\"); \r\n  const [messages, setMessages] = useState([ \r\n    \"Another productive way to use this tool is to begin a daily writing routine. One way is to generate a random paragraph with the intention to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\"\r\n    ,\"Another productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\"\r\n\r\n  ]);\r\n\r\n  \r\n  const handleSend = () => {\r\n    if (newMessage.trim() !== \"\") {\r\n      setMessages([...messages, newMessage]); \r\n      setNewMessage(\"\"); \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n     \r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          {groups.map((group, index) => (\r\n            <li\r\n              key={index}\r\n              className=\"group-item\"\r\n              style={{ backgroundColor: group.color }}\r\n            >\r\n              {group.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n     \r\n      <div className=\"main-contents\">\r\n       \r\n        <div className=\"header\">\r\n          <h2>{groupName}</h2>\r\n        </div>\r\n\r\n        \r\n        <div className=\"messages\">\r\n          {messages.map((message, index) => (\r\n            <p key={index}>{message}<br></br><span>9 Mar 2023\r\n          10:10 AM</span></p>\r\n            \r\n          ))}\r\n          \r\n        </div>\r\n\r\n        \r\n        <div className=\"input-box\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your message\"\r\n            value={newMessage} \r\n            onChange={(e) => setNewMessage(e.target.value)} \r\n          />\r\n          <button onClick={handleSend}>Send</button> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;*/\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst GroupDetails = ({ groups }) => {\r\n  const { groupName } = useParams();\r\n  const group = groups.find((g) => g.name === groupName);\r\n\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const handleSend = () => {\r\n    if (newMessage.trim() !== \"\") {\r\n      setMessages([...messages, newMessage]);\r\n      setNewMessage(\"\");\r\n    }\r\n  };\r\n\r\n  if (!group) {\r\n    return <h1>Group Not Found</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"group-details\">\r\n      <div className=\"header\">\r\n        <h2>{group.name}</h2>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {messages.map((message, index) => (\r\n          <p key={index}>\r\n            {message}\r\n            <br />\r\n            <span>9 Mar 2023 10:10 AM</span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-box\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your message\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}